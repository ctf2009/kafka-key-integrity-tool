import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'org.jetbrains.kotlin.plugin.spring' version "$kotlinVersion"
    id "io.gitlab.arturbosch.detekt" version "${kotlinDetektVersion}"
    id 'org.jetbrains.kotlinx.kover' version '0.7.2'
}

group = 'com.ctf'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation("org.springframework.boot:spring-boot-starter-validation")

    implementation 'org.springframework.kafka:spring-kafka'

    implementation("jakarta.validation:jakarta.validation-api:$jakartaValidationVersion")
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCoroutinesVersion}"
    implementation "io.github.microutils:kotlin-logging-jvm:${kotlinLoggingVersion}"

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${kotlinCoroutinesVersion}"
    testImplementation 'io.kotest:kotest-assertions-core:5.6.2'
    testImplementation "io.mockk:mockk:1.13.5"
}

tasks.withType(KotlinCompile) {
    dependsOn(processResources)
    kotlinOptions {
        freeCompilerArgs += '-Xjsr305=strict'
        jvmTarget = '17'
    }
}

test {
    useJUnitPlatform {
        excludeTags 'StressTest'
    }
}

task perfTests(type: Test) {
    onlyIf {
        project.hasProperty('runPerfTests')
    }
    useJUnitPlatform {
        includeTags 'StressTest'
    }
}

tasks.named("detekt").configure {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

koverReport {
    defaults {
        html {
            onCheck = true
        }
        xml {
            onCheck = true
        }
    }
}
